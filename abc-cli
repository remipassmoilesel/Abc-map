#!/usr/bin/env node

/*

This is a helper forwarding commands to packages/abc-cli/build/main.js

 */

const path = require('path');
const fs = require('fs');
const { execSync } = require('child_process');

const NodeVersionMin = 18;

const projectRoot = path.resolve(__dirname);
const cliRoot = path.resolve(projectRoot, 'packages/abc-cli');
const cliMain = path.resolve(cliRoot, 'build', 'main.js');
const rootNodeModules = path.resolve(cliRoot, 'node_modules');
const cliNodeModules = path.resolve(cliRoot, 'node_modules');
const lastBuildDateFile = path.resolve(cliRoot, '.last-build-date.json');

if (require.main === module) {
  try {
    main(process.argv);
    process.exit(0);
  } catch (err) {
    if (process.env.DEBUG) {
      console.error(err);
    } else {
      console.error(err.message);
    }
    process.exit(1);
  }
}

function main(args) {
  checkNodeVersion();
  checkPrerequisites();

  if (!isCliUpToDate()) {
    updateCli();
  }

  abcCliCommand(args);
}

function checkNodeVersion() {
  const output = execSync('node -v', { cwd: cliRoot, stdio: 'pipe' });
  const versionMatch = output && output.toString('utf-8').match(/^v([0-9]+)/);
  const version = versionMatch && versionMatch.length && parseInt(versionMatch[1]);

  if (!version || version < NodeVersionMin) {
    throw new Error(`Please use at least Node.js ${NodeVersionMin}`);
  }
}

function checkPrerequisites() {
  const tools = [{ name: 'pnpm', doc: 'https://pnpm.io/fr/installation' }];
  for (const tool of tools) {
    try {
      execSync('command -v ' + tool.name);
    } catch (err) {
      throw new Error('You must install "' + tool.name + '", see: ' + tool.doc);
    }
  }
}

function isCliUpToDate() {
  if (isContinuousIntegration()) {
    return false;
  }

  const nodeModulesExists = fs.existsSync(cliNodeModules) && fs.existsSync(rootNodeModules);
  const cliMainExists = fs.existsSync(cliMain);
  const lastBuildDateExists = fs.existsSync(lastBuildDateFile);
  if (!nodeModulesExists || !cliMainExists || !lastBuildDateExists) {
    return false;
  }
  const lastModification = new Date(execSync(`git log -1 --pretty="format:%ci" ${cliRoot}`, { cwd: cliRoot }).toString());
  const lastBuildDate = new Date(require(lastBuildDateFile).date);
  return lastModification <= lastBuildDate;
}

function updateCli() {
  console.log('\nðŸ”¨ Abc CLI must be initialized, it may take a few minutes ... ðŸ”§\n');

  // When we are in CI, we must configure PNPM before the first install
  if (isContinuousIntegration()) {
    console.log('CI environment detected, applying configuration...\n');
    const storePath = path.resolve(projectRoot, '.pnpm-store');
    execSync('pnpm config set store-dir ' + storePath);
  }

  execSync('pnpm install -f', { cwd: projectRoot, stdio: 'inherit' });
  execSync('pnpm run clean-build', { cwd: cliRoot, stdio: 'inherit' });
  fs.writeFileSync(lastBuildDateFile, JSON.stringify({ date: new Date() }));
  console.log('\n');
}

function isContinuousIntegration() {
  return process.env.CI === 'true';
}

function abcCliCommand(args) {
  const argsStr = args.slice(2).join(' ');
  execSync(`node ${cliMain} ${argsStr}`, { cwd: process.cwd(), stdio: 'inherit' });
}
